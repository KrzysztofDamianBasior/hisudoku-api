# Spring Boot automatically loads src/test/resources/application.properties, if following annotations are used: @RunWith(SpringRunner.class), @SpringBootTest. However, it is not always a good idea to have two application.properties files on the classpath (one in src/main/resources and one in src/test/resources). The build tool will use the test resources in favour of the main resources during tests. However, the main one often contains several useful default values, and we only need to override some of them during the test. Only properties defined in src/test/resources/application.properties are loaded during the test phase, src/main/resources/application.properties is ignored. For overriding certain properties for testing add src/main/resources/application-test.properties, and then annotate test class with @ActiveProfiles("test"). This loads application.properties and then application-test.properties properties into application context for the test case. There is also an option to use @TestPropertySource(ocations="classpath:test.properties") to override values in application.properties (then we need to create a new src/test/resources/test.properties file with new values for the tests). Test property sources can be used to selectively override properties defined in system and application property sources. The @TestPropertySource supports inline properties directly (like @TestPropertySource(properties = {"threads-num=10"}) ). We can also defined multiple inline properties directly (like @TestPropertySource(properties = { "threads-num=10", "db.name=db"}) ). Another approach suitable for overriding a few properties in your test is to use annotation like @SpringBootTest(properties = {"propA=valueA", "propB=valueB"}).

#-- greenmail -----------------------------------------------------------------------

spring.mail.host=localhost

# greenmail default protocol port + 3000 as offset
spring.mail.port=3025
spring.mail.username=user
spring.mail.password=pass
spring.mail.protocol=smtp

# avoid setting this to true when using a per-test-method GreenMail server
spring.mail.test-connection=false

#-- security ------------------------------------------------------------------------

application.security.jwt.secret-key= ${TEST_JWT_SECRET_KEY}
# [ms]
application.security.access-token-expiration= ${TEST_ACCESS_TOKEN_EXPIRATION}
