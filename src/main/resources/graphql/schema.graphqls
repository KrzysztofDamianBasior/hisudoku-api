"""
The user account information
"""
type UserModel {
    """
    The user identifier
    """
    id: ID!

    """
    The user account creation date
    """
    enrollmentDate: LocalDateTime!

    """
    A date of the last update of the user account
    """
    updatedAt: LocalDateTime!

    """
    The username
    """
    name: String!

    """
    The role assigned to the user
    """
    role: String!
}

#enum CardType {
#    TYPE_1
#    TYPE_2
#}

#input OrderFilter {
#    cardType: CardType
#}

"""
Custom scalar for handling LocalDateTime in format 'yyyy-MM-dd HH:mm'
"""
scalar LocalDateTime

"""
Custom scalar for handling LocalDate in format 'yyyy-MM-dd'
"""
scalar LocalDate

"""
An user feed structure
"""
type UserFeedModel {
    """
    An user list
    """
    users: [UserModel!]!

    """
    An indicator of whether there is more data to retrieve
    """
    hasNextPage: Boolean!

    """
    A pointer used to keep track of where in the data set the next items should be fetched from
    """
    cursor: ID
}

"""
The sudoku model
"""
type SudokuModel {
    """
    The sudoku identifier
    """
    id: ID!

    """
    The sudoku creation date
    """
    createdAt: LocalDateTime!

    """
    A date of the last update of the sudoku content
    """
    updatedAt: LocalDateTime!

    """
    Author of the sudoku
    """
    author: UserModel!

    """
    The sudoku content
    """
    content: String!

    """
    Number of likes accumulated by sudoku
    """
    favouriteCount: Int!

    """
    Users who liked this sudoku
    """
    favouritedBy(
        """
        A pointer used to keep track of where in the data set the next items should be fetched from
        """
        userCursor: ID

        """
        The maximum number of items returned by the query
        """
        usersLimit: Int!
    ): UserFeedModel!
}

"""
A sudoku feed structure
"""
type SudokuFeedModel {
    """
    Sudokus list
    """
    sudokus: [SudokuModel!]!

    """
    An indicator of whether there is more data to retrieve
    """
    hasNextPage: Boolean!

    """
    A pointer used to keep track of where in the data set the next items should be fetched from
    """
    cursor: String
}

"""
The information available only to the account owner
"""
type AccountModel {
    """
    The account owner identifier
    """
    id: ID!

    """
    The sudokus created by the owner of the account
    """
    createdSudokus(
        """
        A pointer used to keep track of where in the data set the next items should be fetched from
        """
        sudokuCursor: ID

        """
        The maximum number of items returned by the query
        """
        sudokusLimit: Int!
    ): SudokuFeedModel!

    """
    The account creation date
    """
    enrollmentDate: LocalDateTime!

    """
    A date of the last update of the account
    """
    updatedAt: LocalDateTime!

    """
    The username
    """
    name: String!

    """
    The account owner's e-mail address
    """
    email: String

    """
    The role assigned to the user
    """
    role: String!
}

"""
A response returned in the authentication process.
"""
type AuthResponse {
    """
    The user authentication token.
    """
    accessToken: String!
}

"""
A structure with information or instructions
"""
type MessageResponse {
    """
    A message with process status information
    """
    message: String!
}

type Query {
    "A query retrieving information about one of the users\n only for logged in, required roles: [User]\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    user(
        """
        The account ID of the searched user
        """
        userId: ID!
    ): UserModel!

    "A query fetching an user feed\n only for logged in, required roles: [User]\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    userFeed(
        """
        A pointer used to keep track of where in the data set the next items should be fetched from
        """
        userCursor: ID

        """
        The maximum number of items returned by the query
        """
        usersLimit: Int!
    ): UserFeedModel!

    "A query retrieving user account information available only to the owner\n only for logged in, required roles: [User]\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    myAccount: AccountModel!

    "A query fetching a sudoku feed\n only for logged in, no required roles\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    sudokuFeed(
        """
        A pointer used to keep track of where in the data set the next items should be fetched from
        """
        sudokuCursor: ID

        """
        The maximum number of items returned by the query
        """
        sudokusLimit: Int!
    ): SudokuFeedModel!

    "A query retrieving information about one of the sudokus\n only for logged in, no required roles\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    sudoku(
        """
        The ID of the searched sudoku
        """
        sudokuId: ID!
    ): SudokuModel!

    "A query verifying the status of the user's reaction to the selected sudoku\n only for logged in, no required roles\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    doesUserLikeSudoku(
        """
        ID of the the sudoku that is being checked
        """
        sudokuId: ID!
    ): Boolean!


    "A query verifying the status of the user's reaction to the selected sudokus\n only for logged in, no required roles\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    doesUserLikeSudokus(
        """
        IDs of the the sudokus that are being checked
        """
        sudokusIds: [ID]!
    ): [Boolean]!
}

type Mutation {
    "A mutation that changes the username of the selected user\n only for logged in, required roles: [Admin]\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    updateOneUsername(updateOneUsernameInput: UpdateOneUsernameInput!): UserModel!

    "A mutation that removes one of the users\n only for logged in, required roles: [Admin]\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    removeOneUser(removeOneInput: RemoveOneInput!): MessageResponse!

    "A mutation that grants an user administrator privileges\n only for logged in, required roles: [Admin]\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    grantAdminPermissions(
        grantAdminPermissionsInput: GrantAdminPermissionsInput!
    ): UserModel!

    "Mutation available only to the account owner that modifies the username\n only for logged in, required roles: [User]\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    updateMyUsername(updateMyUsernameInput: UpdateMyUsernameInput!): AccountModel!

    "A mutation available only to the account owner that starts the process of updating the e-mail address\n only for logged in, required roles: [User]\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    updateMyEmail(updateMyEmailInput: UpdateMyEmailInput!): MessageResponse!

    "A mutation available only to the account owner that updates the password\n only for logged in, required roles: [User]\n    Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    updateMyPassword(updateMyPasswordInput: UpdateMyPasswordInput!): AccountModel!

    "A mutation that activates the user's email\n no authentication required, no required roles, no extra http headers\n"
    activateEmail(activateEmailInput: ActivateEmailInput!): AccountModel!

    "A mutation available only to the account owner that removes the account\n only for logged in, required roles: [User]\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    removeMyAccount: MessageResponse!

    "A mutation that allows the user to create an account\n no authentication required, no required roles, no extra http headers\n"
    signUp(signUpInput: SignUpInput!): AuthResponse!

    "A mutation that allows the user to authenticate himself\n no authentication required, no required roles, no extra http headers\n"
    signIn(signInInput: SignInInput!): AuthResponse!

    "A mutation that starts the user's password recovery procedure\n no authentication required, no required roles, no extra http headers\n"
    forgotPassword(forgotPasswordInput: ForgotPasswordInput!): MessageResponse!

    "A mutation that create sudoku\n only for logged in, required roles: [User]\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    addSudoku(addSudokuInput: AddSudokuInput!): SudokuModel!

    "A mutation that update sudoku if the user is the author of the sudoku\n only for logged in, required roles: [User]\n Bearer authentication\n HTTP Headers:\n      {\n        \"Authorization\": \"Bearer your-JWT\"\n      }\n"
    updateSudoku(updateSudokuInput: UpdateSudokuInput!): SudokuModel!

    "A mutation that remove sudoku if the user is the author of the sudoku\n only for logged in, required roles: [User]\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    removeSudoku(removeSudokuInput: RemoveSudokuInput!): MessageResponse!

    "A mutation that toggle sudoku like\n only for logged in, required roles: [User]\n Bearer authentication\n HTTP Headers:\n    {\n      \"Authorization\": \"Bearer your-JWT\"\n    }\n"
    toggleFavoriteSudoku(
        toggleFavouriteSudokuInput: ToggleFavouriteSudokuInput!
    ): SudokuModel!
}

"""
The parameters used by the users resolver to update the username for one of the accounts
"""
input UpdateOneUsernameInput {
    """
    ID of the user whose account will be updated
    """
    userId: ID!

    """
    A new username
    """
    newUsername: String!
}

"""
The parameters used by the users resolver to remove one user account
"""
input RemoveOneInput {
    """
    ID of the user whose account will be deleted
    """
    userId: ID!
}

"""
The parameters used by the users resolver to grant the user administrator privileges
"""
input GrantAdminPermissionsInput {
    """
    ID of the user whose account will be updated
    """
    userId: ID!
}

"""
The parameters used by the account owner to update the username
"""
input UpdateMyUsernameInput {
    """
    A new username
    """
    newUsername: String!
}

"""
The parameters used by the account owner to update the email address
"""
input UpdateMyEmailInput {
    """
    A new email address
    """
    newEmail: String!
}

"""
The parameters used by the account owner to update the password
"""
input UpdateMyPasswordInput {
    """
    A new password
    """
    newPassword: String!
}

"""
The parameters used by the auth resolver to create a new user account.
"""
input SignUpInput {
    """
    A name used to identify the user. The name should be longer than 5 characters and not exceed 255 characters.
    """
    username: String!

    """
    An optional e-mail address used in the password recovery process. The email should be longer than 5 characters and not exceed 255 characters.
    """
    email: String

    """
    The password used to authenticate the user. The password should be longer than 5 characters and not exceed 255 characters.
    """
    password: String!
}

"""
The parameters used by the resolver to log in the user.
"""
input SignInInput {
    """
    A name used to identify the user. The name should be longer than 5 characters and not exceed 255 characters.
    """
    username: String!

    """
    The password used to authenticate the user. The password should be longer than 5 characters and not exceed 255 characters.
    """
    password: String!
}

"""
The parameters used by the resolver to start the password recovery procedure
"""
input ForgotPasswordInput {
    """
    An e-mail address used in the password recovery process. The email should be longer than 5 characters and not exceed 255 characters.
    """
    email: String!
}

"""
The parameters used by the sudokus resolver to create the sudoku
"""
input AddSudokuInput {
    """
    Content of the sudoku that user request to create
    """
    content: String!
}

"""
The parameters used by the sudokus resolver to update the sudoku content
"""
input UpdateSudokuInput {
    """
    ID of the sudoku whose content will be updated
    """
    sudokuId: ID!

    """
    A new content
    """
    sudokuContent: String!
}

"""
The parameters used by the sudokus resolver to remove one sudoku
"""
input RemoveSudokuInput {
    """
    ID of the sudoku whose deletion is requested
    """
    sudokuId: ID!
}

"""
The parameters used by the sudokus resolver to toggle the sudoku like
"""
input ToggleFavouriteSudokuInput {
    """
    ID of the sudoku that the user toggle like
    """
    sudokuId: ID!
}

"""
The parameters used by the auth resolver to activate the email address
"""
input ActivateEmailInput {
    """
    An activation token
    """
    token: String!
}
