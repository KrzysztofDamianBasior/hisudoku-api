#-- general -------------------------------------------------------------------------

spring.profiles.active=${ACTIVE_PROFILE}

spring.application.name=hisudokuapi

info.app.name= hisudokuapi
info.app.description= api
info.app.version= 1.0.0

server.port=${DEFAULT_APPLICATION_PORT}

# server.ssl.key-password=${SSL_KEY_PASSWORD}
# server.ssl.key-store-password=${SSL_KEYSTORE_PASSWORD}
# server.ssl.key-store=${SSL_KEYSTORE_PATH}

# By default, a Spring Boot application will look for message files containing internationalization keys and values in the src/main/resources folder. Typically, the files for each locale will be named messages_XX.properties, where XX is the locale code. We can also define a fallback file messages.properties. However, the fallback file should not be considered related to the default locale. They are two separate concepts. The default locale is the locale to default to when the requested locale is unavailable, or null. On the other hand, the fallback file is a place to look up properties when the locale translation fails. If a key does not exist in a specific locale file, then the application will simply fall back to the fallback file. The keys for the values that will be localized have to be the same in every file, with values appropriate to the language they correspond to. By default, Spring Boot looks for the presence of a messages resource bundle at the root of the classpath. Autoconfiguration applies when default properties file is available (messages.properties by default). Spring boot searches for message files in the scr/main/resources folder. This can be changed with the property as show below:
spring.messages.basename=i18n/messages
# spring.messages.basename=messages,config.i18n.messages   -we can pass a list

# fixed locale
# spring.mvc.locale=fr_FR
# spring.mvc.locale-resolver=fixed

# Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.
# spring.messages.cache-seconds=-1

# Message bundles encoding.
# spring.messages.encoding=UTF-8

# Set whether to fall back to the system Locale if no files for a specific Locale have been found.
# spring.messages.fallback-to-system-locale=true

server.error.include-stacktrace=never

# Path of the error controller, server.error.path - is used as part of url for error pages (site.getBaseUrl() + "/error"). Spring Boot BasicErrorController use server.error.path property. You can use this property in @RequestMapping("/error"). But instead of "/error" you can use "${server.error.path}. We create custom error handler using functional interface ErrorController, ths interface has a String type method getErrorPath which helps us to return the error page path(our error page as view), from Spring 2.3.0 this getErrorPath() method has been deprecated and replaced with server.error.path to manage the error path.
# server.error.path=/error
# server.error.path=views/error

# ref: https://stackoverflow.com/questions/70720100/what-do-spring-mvc-view-prefix-and-spring-mvc-view-suffix-have-to-be
# if you are using default "/resources/templates" for rendering view Spring Boot only includes auto-configuration support for the following templating engines: FreeMarker, Groovy, Thymeleaf, Velocity
# spring.thymeleaf.prefix=classpath:/templates/
# spring.thymeleaf.suffix=.html

# ref: https://www.baeldung.com/cachable-static-assets-with-spring-mvc
# To customize the Cache-Control headers in Spring Boot, we can use properties under the spring.resources.cache.cachecontrol property namespace. For example, to change the max-age to one year, we can add the following to our application.properties:
# spring.resources.cache.cachecontrol.max-age=365d
# This applies to all static resources served by Spring Boot. Therefore, if we just want to apply a caching strategy to a subset of requests, we should use the plain Spring MVC approach.
#@EnableWebMvc
#public class MvcConfig implements WebMvcConfigurer {
#@Override
#public void addResourceHandlers(ResourceHandlerRegistry registry) {
#    registry.addResourceHandler("/js/**")
#            .addResourceLocations("/js/")
#            .setCacheControl(CacheControl.maxAge(365, TimeUnit.DAYS))
#            .resourceChain(false)
#            .addResolver(new VersionResourceResolver().addContentVersionStrategy("/**"));
#}
#}
#Here we use a content version strategy. Each file in the /js folder will be served under a URL that has a version computed from its content. This is called fingerprinting. For example, foo.js will now be served under the URL /js/foo-46944c7e3a9bd20cc30fdc085cae46f2.js.
#The reason we have such a long time period for cache validity is that we want the client to use the cached version of the file until the file is updated, and 365 days is the maximum we can use according to the RFC for the Cache-Control header.
#spring.resources.chain.strategy.content.enabled=true
#spring.resources.chain.strategy.content.paths=/**

# Adding this entry to the application.properties file will disable the error page, and show a concise page that originates from the underlying application container, e.g., Tomcat.
# server.error.whitelabel.enabled=false
# We can achieve the same result by excluding the ErrorMvcAutoConfiguration bean
# spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration
# to  run custom logic when errors occur, we have to create an error controller bean that will replace the default one
# By default, all exceptions raised from Spring MVC framework will firstly arrive at Spring's DispatherServlet . DispatcherServlet then delegates the actual handling to a bunch of HandlerExceptionResolvers. All the HandlerExceptionResolvers form an exeption handling chain which stops at the first HandlerExceptionResolver that's able to handle the exception.

#-- security ------------------------------------------------------------------------

# HS256 is HMAC-SHA-256, and that produces digests that are 256 bits (32 bytes) long, so HS256 requires that you use a secret key that is at least 32 bytes long.
application.security.jwt.secret-key=${DEFAULT_JWT_SECRET_KEY}

# in [ms]
application.security.jwt.access-token-expiration=${DEFAULT_ACCESS_TOKEN_EXPIRATION}

#-- validation ----------------------------------------------------------------------

application.validation.min-username-length=${MIN_USERNAME_LENGTH}
application.validation.max-username-length=${MAX_USERNAME_LENGTH}

application.validation.min-password-length=${MIN_PASSWORD_LENGTH}
application.validation.max-password-length=${MAX_PASSWORD_LENGTH}

# We can override default messages defined in Java Bean Validation implementation. All we need to do is define a property file that has the basename ValidationMessages.properties:
# jakarta.validation.constraints.NotEmpty.message=The field cannot be empty
# With the same basename, we can create another property file ValidationMessages_zh.properties for Chinese as well

# @Size(max = 100)
# javax.validation.constraints.Size.message=Please enter a value. Maximum length is {max}.

#-- graphql -------------------------------------------------------------------------

# Usually the server path for graphql endpoints is at POST http://localhost:8080/graphql
# By default, GraphQL queries should be sent as a POST request, not a GET request. When you try to access the /graphql endpoint using a GET request, it's likely to return a 405 error since the endpoint is configured to handle only POST requests.
# spring.graphql.path = /graphql

# GraphQL provides an inbuild UserInterface GraphiQL, which can be accessed via http://localhost:8080/graphiql
# http://localhost:8080/graphiql?path=/graphql
spring.graphql.graphiql.enabled=true

# spring.graphql.cors.allowed-origins=http://localhost:3000
# spring.graphql.cors.allowed-origins=https://example.org
# spring.graphql.cors.allowed-methods=GET,POST
# spring.graphql.cors.max-age=1800s

spring.graphql.instrumentation.max-query-complexity=200
spring.graphql.instrumentation.max-query-depth=20

# By default, the Boot starter checks in src/main/resources/graphql for GraphQL schema files with extensions ".graphqls" or ".gqls ". To override this behavior, you can change the following property.
# spring.graphql.schema.locations=classpath:graphql/
# spring.graphql.schema.fileExtensions=.graphqls, .gqls

# ref: https://docs.spring.io/spring-boot/reference/web/spring-graphql.html
# Spring GraphQL ships with a default GraphiQL page that is exposed at "/graphiql" by default. This page is disabled by default and can be turned on with the spring.graphql.graphiql.enabled property. Many applications exposing such a page will prefer a custom build. A default implementation is very useful during development, this is why it is exposed automatically with spring-boot-devtools during development. You can also choose to expose the GraphQL schema in text format at /graphql/schema when the spring.graphql.schema.printer.enabled property is enabled.
spring.graphql.schema.printer.enabled=true

# By default, field introspection will be allowed on the schema as it is required for tools such as GraphiQL. If you wish to not expose information about the schema, you can disable introspection by setting spring.graphql.schema.introspection.enabled to false.
# spring.graphql.schema.introspection.enabled=true

#-- db ------------------------------------------------------------------------------

spring.data.mongodb.host=${DEFAULT_MONGODB_HOST}
spring.data.mongodb.port=${DEFAULT_MONGODB_PORT}
spring.data.mongodb.database=${DEFAULT_MONGODB_DATABASE}
spring.data.mongodb.username=${DEFAULT_MONGODB_USERNAME}
spring.data.mongodb.password=${DEFAULT_MONGODB_PASSWORD}

# ref: https://howtodoinjava.com/mongodb/command-failed-with-error-18/
# spring.data.mongodb.uri="mongodb://<username>:<password>@<host>:<port>/<database>"
# $ docker run -d -p 27017:27017 --name mongo-on-docker \\
#				-e MONGO_INITDB_ROOT_USERNAME=mongoadmin \\
#				-e MONGO_INITDB_ROOT_PASSWORD=secret \\
#				-e MONGO_INITDB_DATABASE=testdb \\
#				mongo
# This command creates a new user with the name mongoadmin and password secret into the default database admin. The main purpose of this admin database is to store system collections and user authentication and authorization data, which includes the administrator and user's usernames, passwords, and roles. In our application.properties file, we have not mentioned the database name where the user details are located for authentication, we get the authentication failed error.
# To fix this error, we need to, additionally, provide the authentication-database property in the configuration as follows:
spring.data.mongodb.authentication-database=admin
# $ docker exec -it 3248a6f47cebdd25aaab3a9244e85918e2339c07ffd78967b63a5d7bd8766618 mongosh
# $ use admin
# $ db.auth( 'mongoadmin', 'secret' )

#-- mail ----------------------------------------------------------------------------
spring.mail.no-reply=${DEFAULT_MAIL_NO_REPLY}

spring.mail.activate-email-link=${ACTIVATE_EMAIL_LINK}
spring.mail.forgot-password-link=${FORGOT_PASSWORD_LINK}

spring.mail.host=${DEFAULT_MAIL_HOST}
spring.mail.port=${DEFAULT_MAIL_PORT}
spring.mail.username=${DEFAULT_MAIL_USERNAME}
spring.mail.password=${DEFAULT_MAIL_PASSWORD}

# Some SMTP servers require a TLS connection, we can use the property spring.mail.properties.mail.smtp.starttls.enable to enable a TLS-protected connection.
# spring.mail.properties.mail.smtp.starttls.enable=true
# spring.mail.properties.mail.smtp.starttls.required=true

# spring.mail.properties.mail.transport.protocol=smtp
# spring.mail.properties.mail.smtp.auth=true
# spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com

# spring.mail.properties.mail.smtp.port=25
# spring.mail.properties.mail.smtp.auth=true
# spring.mail.properties.mail.smtp.starttls.enable=true
# spring.mail.properties.mail.smtp.starttls.required=true

#-- logging -------------------------------------------------------------------------

# logging.level.root: DEBUG

# The actual queries are logged by the MongoTemplate instance at the DEBUG level. Setting the log level for org.springframework.data.mongodb.core.MongoTemplate to DEBUG will therefore enable the query logging.
logging.level.org.springframework.data.mongodb.core.MongoTemplate=DEBUG
# logging.level.org.springframework.security=TRACE   # for debugging spring-one-time-token

# logging.file.path=.             # write logs to the current directory
# logging.file.path=/home/logs    # write logs to /home/logs
# logging.file.name=myapp.log

logging.config=classpath:logback-spring.xml

#-- management ----------------------------------------------------------------------

# ref: https://www.baeldung.com/spring-boot-actuator-enable-endpoints
# ref: https://www.baeldung.com/spring-liveness-readiness-probes
# How to Enable All Endpoints in Spring Boot Actuator
# Starting with Spring Boot 2, we have to enable and expose our endpoints. By default, all endpoints but /shutdown are enabled and only /health and /info are exposed. All endpoints are found at /actuator even if we?ve configured a different root context for our application. That means that once we?ve added the appropriate starters to our Maven configuration, we can access the /health and /info endpoints at http://localhost:8080/actuator/health and http://localhost:8080/actuator/info. Now, let?s expose all endpoints except /shutdown by modifying our application.properties file:
# management.endpoints.web.exposure.include=*
# The management.endpoints.web.exposure.include property can also take a comma-separated list of endpoints. So, let?s only expose /beans and /loggers:
# management.endpoints.web.exposure.include=beans, loggers
# In addition to including certain endpoints with a property, we can also exclude endpoints. Let?s expose all the endpoints except /threaddump:
# management.endpoints.web.exposure.include=*
# management.endpoints.web.exposure.exclude=threaddump
# Both the include and exclude properties take a list of endpoints. The exclude property takes precedence over include.
#
# to get more fine-grained about which endpoints we have enabled, turn off the default that enables all the endpoints:
# management.endpoints.enabled-by-default=false
#
# Next, let?s enable and expose only the /health endpoint:
# management.endpoint.health.enabled=true
# management.endpoints.web.exposure.include=health
#
# Because of its sensitive nature, the /shutdown endpoint is disabled by default.
# management.endpoint.shutdown.enabled=true
#
# As of Spring Boot 2.3, LivenessStateHealthIndicator and ReadinessStateHealthIndicator classes will expose the liveness and readiness state of the application. As a result, we can use /actuator/health/liveness and /actuator/health/readiness endpoints as our liveness and readiness probes, respectively. If we?re working with Spring Boot 2.3.0 or 2.3.1, we can enable the mentioned probes through a configuration property:
# management.health.probes.enabled=true
# However, since Spring Boot 2.3.2, this property is deprecated due to configuration confusion. If we work with Spring Boot 2.3.2, we can use the new properties to enable liveness and readiness probes:
# management.endpoint.health.probes.enabled=true
# management.health.livenessState.enabled=true
# management.health.readinessState.enabled=true
#
# Spring Boot uses two enums to encapsulate different readiness and liveness states. For readiness state, there is an enum called ReadinessState with the following values:
#    The ACCEPTING_TRAFFIC state represents that the application is ready to accept traffic
#    The REFUSING_TRAFFIC state means that the application is not willing to accept any requests yet
#
#Similarly, the LivenessState enum represents the liveness state of the app with two values:
#    The CORRECT value means the application is running and its internal state is correct
#    On the other hand, the BROKEN value means the application is running with some fatal failures
#
# Application components can retrieve the current readiness and liveness state by injecting the ApplicationAvailability interface:
# @Autowired private ApplicationAvailability applicationAvailability;
#
# Then we can use it as follows:
# assertThat(applicationAvailability.getLivenessState()).isEqualTo(LivenessState.CORRECT);
#
# We can also update the application state by publishing an AvailabilityChangeEvent event:
# assertThat(applicationAvailability.getLivenessState()).isEqualTo(LivenessState.CORRECT);
# mockMvc.perform(get("/actuator/health/liveness")).andExpect(status().isOk())
#   .andExpect(jsonPath("$.status").value("UP"));
#
# AvailabilityChangeEvent.publish(context, LivenessState.BROKEN);
#
# assertThat(applicationAvailability.getLivenessState()).isEqualTo(LivenessState.BROKEN);
# mockMvc.perform(get("/actuator/health/liveness")).andExpect(status().isServiceUnavailable())
#   .andExpect(jsonPath("$.status").value("DOWN"));
#
# We can register event listeners to be notified when an application availability state changes:
# @Component
# public class LivenessEventListener {
#    @EventListener
#    public void onEvent(AvailabilityChangeEvent<LivenessState> event) {
#        switch (event.getState()) {
#        case BROKEN:
#            // notify others
#            break;
#        case CORRECT:
#            // we're back
#        }
#    }
# }

# management.server.port = 8081 # port used to expose actuator
# management.server.address = 127.0.0.1 # CIDR allowed to hit actuator

# management.info.env.enabled=true
# management.info.build.enabled=true
# management.info.java.enabled=true
# management.info.os.enabled=true

management.health.show-details= always
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
management.endpoint.health.probes.enabled=true

# management.endpoints.web.exposure.include=["prometheus", "info", "health", "metrics"]
# management.endpoints.web.exposure.include=beans, loggers

# Spring Boot Actuator provides an endpoint (/actuator/mappings) that allows you to view all the available mappings in your application. You can use this endpoint to ensure that your desired endpoint is mapped correctly.
# management.endpoints.web.exposure.include=mappings
# Now, when you run your Spring Boot application, you can access the mappings endpoint at http://localhost:8080/actuator/mappings. It will show you all the available mappings in your application, helping you verify if your desired endpoint is correctly mapped.