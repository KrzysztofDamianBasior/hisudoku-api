# Hyphen for the beauty, underscores for the compatibility with filesystems and programs.
# Although I prefer to use hyphens (-) to separate words that make up the filename, hyphens and space characters in filenames are not recommended in unix, therefore I sometimes use underscores (_). Docker sometimes convert hyphens to underscores and it also seems that underscores are better tolerated in filenames in some system. This is the reason why I use, for example, the folder name docker_data instead of docker-data.

services:

  mailpit:
    image: axllent/mailpit
    container_name: mailpit
    ports:
      - 8025:8025
      - 1025:1025
#     - "[host:]container[/protocol]"                   -like "8000:8000/udp"
#     - "[host_start-host_end:]container[/protocol]"    -range of ports like 8080-8082:8080"
    networks:
      - reverse_proxy_network
    expose:
      - "8025"
      - "1025"
# If you EXPOSE a port, the service in the container is not accessible from outside Docker, but from inside other Docker containers. So this is good for inter-container communication. If you EXPOSE and -p a port, the service in the container is accessible from anywhere, even outside Docker. If you do -p, but do not EXPOSE, Docker does an implicit EXPOSE. This is because if a port is open to the public, it is automatically also open to other Docker containers. Hence -p includes EXPOSE. EXPOSE is a way of documenting, publish (or -p) is a way of mapping a host port to a running container port

#  mailhog:
#    image: mailhog/mailhog:v1.0.1
#    ports:
#      - 1025:1025
#      - 8025:8025

  mongo:
    ports:
      - '27017:27017'
    expose:
      - 27017
    image: mongo:latest
    container_name: mongo # containers are discoverable via the container name
    #    logging:
#      options:
#        max-size: 1g
    restart: unless-stopped
    environment:
      - MONGO_INITDB_DATABASE=hisudoku
      - MONGO_INITDB_ROOT_USERNAME_FILE=/run/secrets/db_username
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/db_password
#      - MONGO_INITDB_ROOT_USERNAME=root
#      - MONGO_INITDB_ROOT_PASSWORD=pa22Word
#    command:
#      - '--logpath'
#      - '/var/log/mongodb/mongod.log'
    networks:
      - db_network
    secrets:
      - db_password
      - db_username
    volumes:
      - dbdata:/data/db
#      - ./docker_data/mongodb_data:/data/db
  # note to self ------------------------
  # docker exec -it mongodb_contaner bash
  # docker logs some-mongo  -The MongoDB Server log is available through Docker's container log
  #
  # mongo -u Admin -p --authenticationDatabase admin
  # On a fresh connection, the MongoDB shell will automatically connect to the test database by default. You can safely use this database to experiment with MongoDB and the MongoDB shell.
  # -------------------------------------

  hisudoku_api:
#    image: ${REGISTRY:-docker.io}/krzysztofdamianbasior/hisudoku-api:1.0
    container_name: hisudoku-api
    ports:
      - "9090:9090"
    ##      - ${PROD_APPLICATION_PORT}:${PROD_APPLICATION_PORT}
#    expose:
#      - 9090
    depends_on:
      - mongo
      - mailpit
    # condition was removed from compose spec in versions 3.0 to 3.8 but is now back, Using version of the compose spec v3.9+ (docker-compose v1.29), you can use condition as an option in long syntax form of depends_on. It is sadly pretty badly documented so better option can be just use restart: on-failure as solution to communication links failures
    #    depends_on:
    #      db:
    #        condition: service_healthy
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_TAG: local
        VERSION: local
    env_file: .env
#    environment:
#      SPRING_DATA_MONGODB_URI=mongodb://{container_name_of_mongo_db}/{dbName}
#      ACTIVE_PROFILE: dev
#      SSL_KEYSTORE_PATH: /app/config/keystore.jks
#      SSL_KEYSTORE_PASSWORD: hisudoku-password
#      SSL_KEY_PASSWORD: hisudoku-password
#      SPRING_APPLICATION_JSON: '{
#        "spring.data.mongodb.uri" : "mongodb://$MONGODB_USER:$MONGODB_PASSWORD@mongo_db:$MONGODB_DOCKER_PORT/$MONGODB_DATABASE?authSource=admin"
#      }'
#    secrets:
#      - source: keystore
#        target: /app/config/keystore.jks
    networks:
      - reverse_proxy_network
      - db_network
    restart: unless-stopped
#    restart: on-failure

  #    mem_limit – represents the hard memory limits. We have set it to 1GiB
  #    mem_limit: "700m"
  #    mem_reservation: represents the soft memory limits. We have set it to 512MiB
  #    mem_reservation: "600m"
  #    cpus – represents the CPU limit.
  #    cpuset – represents the limit on a specific CPU.

  # when you define a healthcheck in your docker-compose.yml, it will override the HEALTHCHECK instruction specified in the Dockerfile. This allows you to add or modify health checks for images without altering the image itself, which is particularly useful if you’re pulling an image from a remote registry and want to customize the health check for your specific environment
  #    healthcheck:
  #      Docker can either run the command using CMD which is the equivalent of the OS exec syscall directly in the kernel, or it can run using CMD-SHELL which runs a shell to call your command (typically /bin/sh.) (CMD - just allow you to pass params separately)
  #      localhost and 127.0.0.1 - These resolve to the container.
  #      host.docker.internal - This resolves to the outside host.
  #      test: ["CMD", "java", "-Durl=https://localhost:9090/actuator/health" , "HealthCheck.java", "||", "exit", "1"]
  #      interval: 5s
  #      timeout: 2s
  #      retries: 2

  nginx:
    container_name: reverse-proxy
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker_data/hisudoku_api.conf:/etc/nginx/conf.d/default.conf
    #      - ./docker_data/proxy.conf:/etc/nginx/proxy.conf
    networks:
      - reverse_proxy_network
    depends_on:
      - hisudoku_api
    restart: on-failure

networks:
  reverse_proxy_network:
  db_network:

secrets:
  db_password:
    file: secrets/db_password.txt
  db_username:
    file: secrets/db_username.txt
#  keystore:
#    file: ./secrets/keystore.jks

volumes:
  dbdata:
  #  proxy_cache:
